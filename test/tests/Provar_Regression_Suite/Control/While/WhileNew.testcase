<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<testCase id="10">
  <summary/>
  <steps>
    <apiCall apiId="com.provar.plugins.bundled.apis.string.Split" name="Split" testItemId="51" title="Split: 1,2=&gt;,=&gt;values">
      <arguments>
        <argument id="input">
          <value class="value" valueClass="string">1,2</value>
        </argument>
        <argument id="separator">
          <value class="value" valueClass="string">,</value>
        </argument>
        <argument id="resultName">
          <value class="value" valueClass="string">values</value>
        </argument>
        <argument id="resultScope">
          <value class="value" valueClass="string">Test</value>
        </argument>
      </arguments>
    </apiCall>
    <apiCall apiId="com.provar.plugins.bundled.apis.control.SetValues" name="SetValues" testItemId="58" title="Set Values: counter">
      <arguments>
        <argument id="values">
          <value class="valueList" mutable="Mutable">
            <namedValues mutable="Mutable">
              <namedValue name="valuePath">
                <value class="value" valueClass="string">counter</value>
              </namedValue>
              <namedValue name="value">
                <value class="value" valueClass="string">1</value>
              </namedValue>
              <namedValue name="valueScope">
                <value class="value" valueClass="string">Test</value>
              </namedValue>
            </namedValues>
          </value>
        </argument>
      </arguments>
    </apiCall>
    <apiCall apiId="com.provar.plugins.bundled.apis.control.SetValues" name="SetValues" testItemId="60" title="Set Values: test">
      <arguments>
        <argument id="values">
          <value class="valueList" mutable="Mutable">
            <namedValues mutable="Mutable">
              <namedValue name="valuePath">
                <value class="value" valueClass="string">test</value>
              </namedValue>
              <namedValue name="value">
                <value class="variable" topLevel="true">
                  <path element="values">
                    <filter class="conditionFilter">
                      <condition class="variable" topLevel="true">
                        <path element="counter"/>
                      </condition>
                    </filter>
                  </path>
                </value>
              </namedValue>
              <namedValue name="valueScope">
                <value class="value" valueClass="string">Test</value>
              </namedValue>
            </namedValues>
          </value>
        </argument>
      </arguments>
    </apiCall>
    <apiCall apiId="com.provar.plugins.bundled.apis.control.DoWhile" name="DoWhile" testItemId="54" title="While: {$counter != Count($values)}">
      <arguments>
        <argument id="condition">
          <value class="ne">
            <lhs class="variable" topLevel="true">
              <path element="counter"/>
            </lhs>
            <rhs class="funcCall" id="Count">
              <argument id="value">
                <value class="variable" topLevel="true">
                  <path element="values"/>
                </value>
              </argument>
            </rhs>
          </value>
        </argument>
        <argument id="counterName">
          <value class="value" valueClass="string">LoopCounter</value>
        </argument>
        <argument id="counterStart">
          <value class="value" valueClass="decimal">1</value>
        </argument>
        <argument id="counterEnd"/>
        <argument id="continueOnFailure">
          <value class="value" valueClass="boolean">true</value>
        </argument>
      </arguments>
      <clauses>
        <clause name="substeps" testItemId="55">
          <steps>
            <apiCall apiId="com.provar.plugins.bundled.apis.AssertValues" name="AssertValues" testItemId="57" title="Assert: {counter} EqualTo {values[$counter]}">
              <arguments>
                <argument id="expectedValue">
                  <value class="variable">
                    <path element="counter"/>
                  </value>
                </argument>
                <argument id="actualValue">
                  <value class="variable">
                    <path element="values">
                      <filter class="conditionFilter">
                        <condition class="variable" topLevel="true">
                          <path element="counter"/>
                        </condition>
                      </filter>
                    </path>
                  </value>
                </argument>
                <argument id="comparisonType">
                  <value class="value" valueClass="string">EqualTo</value>
                </argument>
                <argument id="caseSensitive">
                  <value class="value" valueClass="boolean">false</value>
                </argument>
                <argument id="retainDecimals">
                  <value class="value" valueClass="boolean">false</value>
                </argument>
                <argument id="nullGreater">
                  <value class="value" valueClass="boolean">false</value>
                </argument>
                <argument id="matchMultiLine">
                  <value class="value" valueClass="boolean">false</value>
                </argument>
                <argument id="matchDotAll">
                  <value class="value" valueClass="boolean">false</value>
                </argument>
                <argument id="failureMessage"/>
              </arguments>
            </apiCall>
            <apiCall apiId="com.provar.plugins.bundled.apis.control.SetValues" name="SetValues" testItemId="59" title="Set Values: counter">
              <arguments>
                <argument id="values">
                  <value class="valueList" mutable="Mutable">
                    <namedValues mutable="Mutable">
                      <namedValue name="valuePath">
                        <value class="value" valueClass="string">counter</value>
                      </namedValue>
                      <namedValue name="value">
                        <value class="add">
                          <lhs class="variable" topLevel="true">
                            <path element="counter"/>
                          </lhs>
                          <rhs class="value" valueClass="decimal">1</rhs>
                        </value>
                      </namedValue>
                      <namedValue name="valueScope">
                        <value class="value" valueClass="string">Test</value>
                      </namedValue>
                    </namedValues>
                  </value>
                </argument>
              </arguments>
            </apiCall>
          </steps>
        </clause>
      </clauses>
    </apiCall>
  </steps>
  <tags>
    <string>disabled</string>
  </tags>
</testCase>
